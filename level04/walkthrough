1. This program creates a child process and waits for it to change its state. The child process asks for shellcode and uses a buffer on its stackframe with the "gets" function.
2. When the child process receives input, it ends. The parent process stops waiting and prints "child is exiting...".
3. The goal is to exploit the child process to gain a shell by exploiting a buffer overflow vulnerability in "gets".
4. We initially attempted an exploit that executed "execve('/bin/sh')" using a shellcode with a buffer overflow. However, when the process reached the "exec" function, the parent process displayed the message "no exec() for you" and terminated the child process.
5. We discovered that the parent process monitored the state change to detect if the child process was replaced by "execve".
6. Therefore, we needed to choose an alternative technique to obtain a shell.
7. We used a technique called Ret2Libc, which involved calling the "system()" function instead of replacing the process, making it undetectable by the parent process.
8. Here are the steps to create a Ret2Libc exploit:
   a. Obtain the address of the string '/bin/sh' in the binary using GDB commands.
   b. Obtain the address of the "system" function in the libc using GDB commands.
   c. Analyze the binary to determine the padding required before replacing the EIP.
   d. Build the exploit using the obtained addresses and padding.
   e. Execute the exploit by sending input to the program.
9. Here is the demonstration of the running exploit :

level04@OverRide:~$ (perl -e 'print "1"x156 . "\xd0\xae\xe6\xf7" . "OSEF" . "\xec\x97\xf8\xf7" . "\n"'; cat -) | ./level04
Give me some shellcode, k
whoami
level05
cat ~level05/.pass
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
echo yey
yey

10. GG
